/******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

"use strict";

var fs = require("fs");
var express = require("express");
const { timeStamp } = require("console");
var app = express();

app.use(express.json());

if (!process.env.DISABLE_XORIGIN) {
  app.use(function (req, res, next) {
    var allowedOrigins = [
      "https://narrow-plane.gomix.me",
      "https://www.freecodecamp.com",
    ];
    var origin = req.headers.origin || "*";
    if (!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1) {
      console.log(origin);
      res.setHeader("Access-Control-Allow-Origin", origin);
      res.header(
        "Access-Control-Allow-Headers",
        "Origin, X-Requested-With, Content-Type, Accept"
      );
    }
    next();
  });
}

app.use("/public", express.static(process.cwd() + "/public"));

app.route("/_api/package.json").get(function (req, res, next) {
  console.log("requested");
  fs.readFile(__dirname + "/package.json", function (err, data) {
    if (err) return next(err);
    res.type("txt").send(data.toString());
  });
});

app.route("/").get(function (req, res) {
  res.sendFile(process.cwd() + "/views/index.html");
});

// app.route("/api/:date?").get(function (req, res) {
//   const dateString = req.params.date;
//   if (!dateString)
//     return res
//       .status(200)
//       .send({ unix: Date.now(), utc: new Date().toUTCString() });
//       var dateObj;
//   if (/\d{5,}/.test(dateString)) {
//      dateObj = new Date(parseInt(dateString));
//   }else{
//     dateObj = new Date(dateString);
//   }
//   if (!isNaN(dateObj)) {
//     return res.status(200).json({ unix: dateObj.valueOf(), utc: dateObj.toUTCString() });
//   } else {
//     return res.status(400).json({ error: "Invalid Date" });
//   }
// });

// app.route("/api/whoami").get(function (req, res) {
//   return res.json({ipaddress : "14.248.82.197" , language : "Vietnamese" , software : "web"})
// });

const shorturlMap = {};
var index = 1;

app.get("/api/shorturl/:short_url", (req, res) => {
  const shortUrl = req.params.short_url;
  res.redirect(shorturlMap[shortUrl])
});
app.post("/api/shorturl", (req, res) => {
  const urlRegex = /^(http|https):\/\/www\..*\.(com|org)$/;

  if (!req.body || !req.body.original_url) {
    return res.status(400).json({ error: "Invalid request body" });
  }

  const { original_url } = req.body;

  if (!urlRegex.test(original_url)) {
    return res.status(400).json({ error: "invalid url" });
  }

  shorturlMap[index] = original_url;
  index++;

  res.json({ original_url: original_url, short_url: index - 1 });
});

// Respond not found to all the wrong routes
app.use(function (req, res, next) {
  res.status(404);
  res.type("txt").send("Not found");
});

// Error Middleware
app.use(function (err, req, res, next) {
  if (err) {
    res
      .status(err.status || 500)
      .type("txt")
      .send(err.message || "SERVER ERROR");
  }
});

//Listen on port set in environment variable or default to 3000
const listener = app.listen(process.env.PORT || 3000, function () {
  console.log("Node.js listening on port " + listener.address().port);
});
